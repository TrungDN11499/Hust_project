//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 36 colors.
  struct color {
    /// Color `SpO2Average`.
    static let spO2Average = Rswift.ColorResource(bundle: R.hostingBundle, name: "SpO2Average")
    /// Color `SpO2Low`.
    static let spO2Low = Rswift.ColorResource(bundle: R.hostingBundle, name: "SpO2Low")
    /// Color `active`.
    static let active = Rswift.ColorResource(bundle: R.hostingBundle, name: "active")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `biolightHigh1`.
    static let biolightHigh1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightHigh1")
    /// Color `biolightHigh2`.
    static let biolightHigh2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightHigh2")
    /// Color `biolightLow`.
    static let biolightLow = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightLow")
    /// Color `biolightNormal`.
    static let biolightNormal = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightNormal")
    /// Color `biolightPre`.
    static let biolightPre = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightPre")
    /// Color `blue`.
    static let blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue")
    /// Color `darkText`.
    static let darkText = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkText")
    /// Color `disable`.
    static let disable = Rswift.ColorResource(bundle: R.hostingBundle, name: "disable")
    /// Color `good`.
    static let good = Rswift.ColorResource(bundle: R.hostingBundle, name: "good")
    /// Color `high`.
    static let high = Rswift.ColorResource(bundle: R.hostingBundle, name: "high")
    /// Color `idealWeightColor`.
    static let idealWeightColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "idealWeightColor")
    /// Color `mainColor`.
    static let mainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainColor")
    /// Color `overweight1`.
    static let overweight1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "overweight1")
    /// Color `overweight2`.
    static let overweight2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "overweight2")
    /// Color `overweight`.
    static let overweight = Rswift.ColorResource(bundle: R.hostingBundle, name: "overweight")
    /// Color `ratioOfFatColor`.
    static let ratioOfFatColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ratioOfFatColor")
    /// Color `ratioOfProteinColor`.
    static let ratioOfProteinColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ratioOfProteinColor")
    /// Color `ratioOfSubcutaneousFatColor`.
    static let ratioOfSubcutaneousFatColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ratioOfSubcutaneousFatColor")
    /// Color `ratioOfWaterColor`.
    static let ratioOfWaterColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ratioOfWaterColor")
    /// Color `red`.
    static let red = Rswift.ColorResource(bundle: R.hostingBundle, name: "red")
    /// Color `separatorColor`.
    static let separatorColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "separatorColor")
    /// Color `shadow`.
    static let shadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadow")
    /// Color `spO2Good`.
    static let spO2Good = Rswift.ColorResource(bundle: R.hostingBundle, name: "spO2Good")
    /// Color `standard`.
    static let standard = Rswift.ColorResource(bundle: R.hostingBundle, name: "standard")
    /// Color `subTitle`.
    static let subTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "subTitle")
    /// Color `thin`.
    static let thin = Rswift.ColorResource(bundle: R.hostingBundle, name: "thin")
    /// Color `title`.
    static let title = Rswift.ColorResource(bundle: R.hostingBundle, name: "title")
    /// Color `weightColor`.
    static let weightColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "weightColor")
    /// Color `weightOfBoneColor`.
    static let weightOfBoneColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "weightOfBoneColor")
    /// Color `weightOfMuscleColor`.
    static let weightOfMuscleColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "weightOfMuscleColor")
    /// Color `white`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "white")
    /// Color `yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SpO2Average", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func spO2Average(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.spO2Average, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SpO2Low", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func spO2Low(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.spO2Low, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "active", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightHigh1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightHigh1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightHigh1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightHigh2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightHigh2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightHigh2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightLow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightLow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightLow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightNormal", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightPre", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightPre(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightPre, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "disable", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "good", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func good(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.good, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "high", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func high(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.high, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "idealWeightColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func idealWeightColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.idealWeightColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "overweight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func overweight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.overweight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "overweight1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func overweight1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.overweight1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "overweight2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func overweight2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.overweight2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ratioOfFatColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ratioOfFatColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ratioOfFatColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ratioOfProteinColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ratioOfProteinColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ratioOfProteinColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ratioOfSubcutaneousFatColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ratioOfSubcutaneousFatColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ratioOfSubcutaneousFatColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ratioOfWaterColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ratioOfWaterColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ratioOfWaterColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "separatorColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separatorColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separatorColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "spO2Good", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func spO2Good(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.spO2Good, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "standard", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func standard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.standard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "subTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func subTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.subTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "thin", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "title", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.title, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "weightColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func weightColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.weightColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "weightOfBoneColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func weightOfBoneColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.weightOfBoneColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "weightOfMuscleColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func weightOfMuscleColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.weightOfMuscleColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SpO2Average", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func spO2Average(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.spO2Average.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SpO2Low", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func spO2Low(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.spO2Low.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "active", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func active(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.active.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightHigh1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightHigh1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightHigh1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightHigh2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightHigh2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightHigh2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightLow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightLow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightLow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightNormal", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightNormal(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightNormal.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightPre", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightPre(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightPre.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "darkText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "disable", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func disable(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.disable.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "good", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func good(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.good.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "high", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func high(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.high.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "idealWeightColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func idealWeightColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.idealWeightColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "overweight", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func overweight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.overweight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "overweight1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func overweight1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.overweight1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "overweight2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func overweight2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.overweight2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ratioOfFatColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ratioOfFatColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ratioOfFatColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ratioOfProteinColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ratioOfProteinColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ratioOfProteinColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ratioOfSubcutaneousFatColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ratioOfSubcutaneousFatColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ratioOfSubcutaneousFatColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ratioOfWaterColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ratioOfWaterColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ratioOfWaterColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "separatorColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func separatorColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.separatorColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shadow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "spO2Good", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func spO2Good(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.spO2Good.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "standard", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func standard(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.standard.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "subTitle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func subTitle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.subTitle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "thin", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func thin(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.thin.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "title", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func title(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.title.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "weightColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func weightColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.weightColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "weightOfBoneColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func weightOfBoneColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.weightOfBoneColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "weightOfMuscleColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func weightOfMuscleColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.weightOfMuscleColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func white(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.white.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellow.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Griffy-Regular.ttf`.
    static let griffyRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Griffy-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Griffy-Regular", withExtension: "ttf")`
    static func griffyRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.griffyRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `Griffy-Regular`.
    static let griffyRegular = Rswift.FontResource(fontName: "Griffy-Regular")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")

    /// `UIFont(name: "Griffy-Regular", size: ...)`
    static func griffyRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: griffyRegular, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    static func validate() throws {
      if R.font.griffyRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Griffy-Regular' could not be loaded, is 'Griffy-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 50 images.
  struct image {
    /// Image `Backward_Arrow`.
    static let backward_Arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Backward_Arrow")
    /// Image `Capri, Italy 1`.
    static let capriItaly1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Capri, Italy 1")
    /// Image `Forward_Arrow`.
    static let forward_Arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forward_Arrow")
    /// Image `baseline_arrow_back_white_24dp`.
    static let baseline_arrow_back_white_24dp = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_arrow_back_white_24dp")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `down_arrow_24pt`.
    static let down_arrow_24pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "down_arrow_24pt")
    /// Image `home_unselected`.
    static let home_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_unselected")
    /// Image `ic_activity_setting`.
    static let ic_activity_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_activity_setting")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_agoda`.
    static let ic_agoda = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_agoda")
    /// Image `ic_appic`.
    static let ic_appic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_appic")
    /// Image `ic_arrow_down`.
    static let ic_arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_down")
    /// Image `ic_arrow`.
    static let ic_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow")
    /// Image `ic_bell_untouch`.
    static let ic_bell_untouch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bell_untouch")
    /// Image `ic_booking_untouch`.
    static let ic_booking_untouch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_booking_untouch")
    /// Image `ic_booking`.
    static let ic_booking = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_booking")
    /// Image `ic_chose_image`.
    static let ic_chose_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chose_image")
    /// Image `ic_chose_images`.
    static let ic_chose_images = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chose_images")
    /// Image `ic_comment`.
    static let ic_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment")
    /// Image `ic_control_untouch`.
    static let ic_control_untouch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_control_untouch")
    /// Image `ic_default_user`.
    static let ic_default_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_default_user")
    /// Image `ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit")
    /// Image `ic_empty`.
    static let ic_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_empty")
    /// Image `ic_group`.
    static let ic_group = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_group")
    /// Image `ic_heart_filled`.
    static let ic_heart_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart_filled")
    /// Image `ic_heart`.
    static let ic_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart")
    /// Image `ic_home_untouch`.
    static let ic_home_untouch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_untouch")
    /// Image `ic_list_empty`.
    static let ic_list_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_list_empty")
    /// Image `ic_lock_outline_white_2x`.
    static let ic_lock_outline_white_2x = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lock_outline_white_2x")
    /// Image `ic_lock`.
    static let ic_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lock")
    /// Image `ic_logout`.
    static let ic_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logout")
    /// Image `ic_mail_outline_white_2x-1`.
    static let ic_mail_outline_white_2x1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mail_outline_white_2x-1")
    /// Image `ic_mail`.
    static let ic_mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mail")
    /// Image `ic_menu_white_3x`.
    static let ic_menu_white_3x = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_white_3x")
    /// Image `ic_message`.
    static let ic_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_message")
    /// Image `ic_person_outline_white_2x`.
    static let ic_person_outline_white_2x = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_person_outline_white_2x")
    /// Image `ic_remove_image`.
    static let ic_remove_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remove_image")
    /// Image `ic_search_untouch`.
    static let ic_search_untouch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_untouch")
    /// Image `ic_sun`.
    static let ic_sun = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sun")
    /// Image `ic_triponus`.
    static let ic_triponus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_triponus")
    /// Image `ic_userIamge`.
    static let ic_userIamge = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_userIamge")
    /// Image `ic_user`.
    static let ic_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user")
    /// Image `image 1`.
    static let image1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image 1")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `new_tweet`.
    static let new_tweet = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_tweet")
    /// Image `plus_photo`.
    static let plus_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_photo")
    /// Image `retweet`.
    static let retweet = Rswift.ImageResource(bundle: R.hostingBundle, name: "retweet")
    /// Image `search_unselected`.
    static let search_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_unselected")
    /// Image `send.ig`.
    static let sendIg = Rswift.ImageResource(bundle: R.hostingBundle, name: "send.ig")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Backward_Arrow", bundle: ..., traitCollection: ...)`
    static func backward_Arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backward_Arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Capri, Italy 1", bundle: ..., traitCollection: ...)`
    static func capriItaly1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.capriItaly1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Forward_Arrow", bundle: ..., traitCollection: ...)`
    static func forward_Arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forward_Arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_arrow_back_white_24dp", bundle: ..., traitCollection: ...)`
    static func baseline_arrow_back_white_24dp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_arrow_back_white_24dp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down_arrow_24pt", bundle: ..., traitCollection: ...)`
    static func down_arrow_24pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down_arrow_24pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_unselected", bundle: ..., traitCollection: ...)`
    static func home_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_activity_setting", bundle: ..., traitCollection: ...)`
    static func ic_activity_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_activity_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_agoda", bundle: ..., traitCollection: ...)`
    static func ic_agoda(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_agoda, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_appic", bundle: ..., traitCollection: ...)`
    static func ic_appic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_appic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow", bundle: ..., traitCollection: ...)`
    static func ic_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_down", bundle: ..., traitCollection: ...)`
    static func ic_arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bell_untouch", bundle: ..., traitCollection: ...)`
    static func ic_bell_untouch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bell_untouch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_booking", bundle: ..., traitCollection: ...)`
    static func ic_booking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_booking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_booking_untouch", bundle: ..., traitCollection: ...)`
    static func ic_booking_untouch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_booking_untouch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chose_image", bundle: ..., traitCollection: ...)`
    static func ic_chose_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chose_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chose_images", bundle: ..., traitCollection: ...)`
    static func ic_chose_images(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chose_images, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_comment", bundle: ..., traitCollection: ...)`
    static func ic_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_control_untouch", bundle: ..., traitCollection: ...)`
    static func ic_control_untouch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_control_untouch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_default_user", bundle: ..., traitCollection: ...)`
    static func ic_default_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_default_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_empty", bundle: ..., traitCollection: ...)`
    static func ic_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_group", bundle: ..., traitCollection: ...)`
    static func ic_group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_heart", bundle: ..., traitCollection: ...)`
    static func ic_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_heart_filled", bundle: ..., traitCollection: ...)`
    static func ic_heart_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_untouch", bundle: ..., traitCollection: ...)`
    static func ic_home_untouch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_untouch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_list_empty", bundle: ..., traitCollection: ...)`
    static func ic_list_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_list_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_lock", bundle: ..., traitCollection: ...)`
    static func ic_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_lock_outline_white_2x", bundle: ..., traitCollection: ...)`
    static func ic_lock_outline_white_2x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lock_outline_white_2x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logout", bundle: ..., traitCollection: ...)`
    static func ic_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mail", bundle: ..., traitCollection: ...)`
    static func ic_mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mail_outline_white_2x-1", bundle: ..., traitCollection: ...)`
    static func ic_mail_outline_white_2x1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mail_outline_white_2x1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_menu_white_3x", bundle: ..., traitCollection: ...)`
    static func ic_menu_white_3x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_white_3x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_message", bundle: ..., traitCollection: ...)`
    static func ic_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_person_outline_white_2x", bundle: ..., traitCollection: ...)`
    static func ic_person_outline_white_2x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_person_outline_white_2x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_remove_image", bundle: ..., traitCollection: ...)`
    static func ic_remove_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remove_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_untouch", bundle: ..., traitCollection: ...)`
    static func ic_search_untouch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_untouch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sun", bundle: ..., traitCollection: ...)`
    static func ic_sun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_triponus", bundle: ..., traitCollection: ...)`
    static func ic_triponus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_triponus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user", bundle: ..., traitCollection: ...)`
    static func ic_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_userIamge", bundle: ..., traitCollection: ...)`
    static func ic_userIamge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_userIamge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image 1", bundle: ..., traitCollection: ...)`
    static func image1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_tweet", bundle: ..., traitCollection: ...)`
    static func new_tweet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_tweet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_photo", bundle: ..., traitCollection: ...)`
    static func plus_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "retweet", bundle: ..., traitCollection: ...)`
    static func retweet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.retweet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_unselected", bundle: ..., traitCollection: ...)`
    static func search_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send.ig", bundle: ..., traitCollection: ...)`
    static func sendIg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendIg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 15 nibs.
  struct nib {
    /// Nib `BookingCLVCell`.
    static let bookingCLVCell = _R.nib._BookingCLVCell()
    /// Nib `BookingViewController`.
    static let bookingViewController = _R.nib._BookingViewController()
    /// Nib `CommentTableViewCell`.
    static let commentTableViewCell = _R.nib._CommentTableViewCell()
    /// Nib `CreateGroupViewController`.
    static let createGroupViewController = _R.nib._CreateGroupViewController()
    /// Nib `CustomTextField`.
    static let customTextField = _R.nib._CustomTextField()
    /// Nib `EditProfileViewController`.
    static let editProfileViewController = _R.nib._EditProfileViewController()
    /// Nib `FeedsHeaderCollectionReusableView`.
    static let feedsHeaderCollectionReusableView = _R.nib._FeedsHeaderCollectionReusableView()
    /// Nib `GroupsViewController`.
    static let groupsViewController = _R.nib._GroupsViewController()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `NotificationTBVCell`.
    static let notificationTBVCell = _R.nib._NotificationTBVCell()
    /// Nib `RegisterViewController`.
    static let registerViewController = _R.nib._RegisterViewController()
    /// Nib `SettingTVC`.
    static let settingTVC = _R.nib._SettingTVC()
    /// Nib `TweetCollectionViewCell`.
    static let tweetCollectionViewCell = _R.nib._TweetCollectionViewCell()
    /// Nib `TweetViewController`.
    static let tweetViewController = _R.nib._TweetViewController()
    /// Nib `UploadTweetViewController`.
    static let uploadTweetViewController = _R.nib._UploadTweetViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookingCLVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookingCLVCell) instead")
    static func bookingCLVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingCLVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookingViewController) instead")
    static func bookingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentTableViewCell) instead")
    static func commentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CreateGroupViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createGroupViewController) instead")
    static func createGroupViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createGroupViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomTextField", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customTextField) instead")
    static func customTextField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customTextField)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EditProfileViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileViewController) instead")
    static func editProfileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FeedsHeaderCollectionReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.feedsHeaderCollectionReusableView) instead")
    static func feedsHeaderCollectionReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.feedsHeaderCollectionReusableView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GroupsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.groupsViewController) instead")
    static func groupsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginViewController) instead")
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationTBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationTBVCell) instead")
    static func notificationTBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTBVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerViewController) instead")
    static func registerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingTVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingTVC) instead")
    static func settingTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingTVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TweetCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tweetCollectionViewCell) instead")
    static func tweetCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tweetCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TweetViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tweetViewController) instead")
    static func tweetViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tweetViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UploadTweetViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.uploadTweetViewController) instead")
    static func uploadTweetViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.uploadTweetViewController)
    }
    #endif

    static func bookingCLVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingCLVCell? {
      return R.nib.bookingCLVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCLVCell
    }

    static func bookingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bookingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func commentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentTableViewCell? {
      return R.nib.commentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentTableViewCell
    }

    static func createGroupViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.createGroupViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func customTextField(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customTextField.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func editProfileViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.editProfileViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func feedsHeaderCollectionReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeedsHeaderCollectionReusableView? {
      return R.nib.feedsHeaderCollectionReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedsHeaderCollectionReusableView
    }

    static func groupsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.groupsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationTBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTBVCell? {
      return R.nib.notificationTBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTBVCell
    }

    static func registerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.registerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func settingTVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingTVC? {
      return R.nib.settingTVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingTVC
    }

    static func tweetCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TweetCollectionViewCell? {
      return R.nib.tweetCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TweetCollectionViewCell
    }

    static func tweetViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tweetViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func uploadTweetViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.uploadTweetViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CreateGroupViewController.validate()
      try _EditProfileViewController.validate()
      try _FeedsHeaderCollectionReusableView.validate()
      try _LoginViewController.validate()
      try _NotificationTBVCell.validate()
      try _RegisterViewController.validate()
      try _SettingTVC.validate()
      try _TweetCollectionViewCell.validate()
      try _TweetViewController.validate()
      try _UploadTweetViewController.validate()
    }

    struct _BookingCLVCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BookingCLVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingCLVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCLVCell
      }

      fileprivate init() {}
    }

    struct _BookingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BookingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CommentTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommentTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentTableViewCell
      }

      fileprivate init() {}
    }

    struct _CreateGroupViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CreateGroupViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down' is used in nib 'CreateGroupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_remove_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remove_image' is used in nib 'CreateGroupViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CustomTextField: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomTextField"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EditProfileViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditProfileViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in nib 'EditProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user' is used in nib 'EditProfileViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FeedsHeaderCollectionReusableView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FeedsHeaderCollectionReusableView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeedsHeaderCollectionReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedsHeaderCollectionReusableView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_appic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_appic' is used in nib 'FeedsHeaderCollectionReusableView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chose_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chose_image' is used in nib 'FeedsHeaderCollectionReusableView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_message' is used in nib 'FeedsHeaderCollectionReusableView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_triponus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_triponus' is used in nib 'FeedsHeaderCollectionReusableView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GroupsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GroupsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Capri, Italy 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Capri, Italy 1' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_appic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_appic' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NotificationTBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NotificationTBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_userIamge", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_userIamge' is used in nib 'NotificationTBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RegisterViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RegisterViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Capri, Italy 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Capri, Italy 1' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_userIamge", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_userIamge' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SettingTVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingTVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingTVC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow' is used in nib 'SettingTVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TweetCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TweetCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TweetCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TweetCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_activity_setting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_activity_setting' is used in nib 'TweetCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comment' is used in nib 'TweetCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart' is used in nib 'TweetCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TweetViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TweetViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_activity_setting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_activity_setting' is used in nib 'TweetViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comment' is used in nib 'TweetViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart' is used in nib 'TweetViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UploadTweetViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UploadTweetViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_remove_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remove_image' is used in nib 'UploadTweetViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
